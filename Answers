2. A Mariadb 10.3 Galera cluster with three nodes requires a schema change that, if put through normally, will block queries to a frequently accessed table and bring down the API. If this change is backwards compatible with the existing queries made to the database, what steps, being specific, would you take to roll out the new schema?

Begin by ensuring your application is compatible with both the old and new database schemas. Using tools like pt-online-schema-change, which create new empty copies of tables to be altered, applying the desired changes and then copying rows from the original table in small batches, significantly reduces downtime. Apply these changes to one server at a time, allowing the others to handle requests and avoid downtime. After updating all servers, remove any temporary compatibility code from your application. It's also prudent to start with a recent backup of your database. This step acts as a safety net against any unexpected complications that might arise during the schema change process.

3. Queries on a large InnoDB table are taking longer and longer to complete. After some investigation, it is determined that indexes are fine and queries are optimal. However, the CPU is increasingly waiting for IO to complete while retrieving data from persistent storage. Assuming the system hardware configuration is also optimal, what would you do to remedy the situation?

One effective approach would be to investigate caching. Use caching mechanisms like Memcached to store frequently accessed data in memory. This reduces the need to access the disk frequently. Additionally, you might consider optimising your database configuration for InnoDB by adjusting parameters like innodb_buffer_pool_size, ensuring it's large enough to hold your working dataset, which can significantly reduce disk IO. Other techniques that could be worth investigating or implementing include InnoDB table compression, which reduces the amount of data read and written to disk, although it will increase CPU usage, or adjusting settings like innodb_io_capacity, which controls the number of I/O operations InnoDB can perform per second.
